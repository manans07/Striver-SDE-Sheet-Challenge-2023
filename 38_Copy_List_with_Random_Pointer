/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        
        /*Method 1: Brute Force*/
        if(head == nullptr) return nullptr;
        
        Node* temp = head;
        unordered_map<Node*,Node*> mp;
        
        while(temp)
        {
            Node* n1 = new Node(temp->val);
            mp[temp] = n1;
            temp = temp->next;
            }
        
        Node* t = head;
        
        while(t)
        {
            Node* n1 = mp[t];
            n1->random = (t->random != NULL)?mp[t->random]:nullptr;
            n1->next = (t->next != NULL)?mp[t->next]:nullptr;
            t=t->next;
        }
        
        return mp[head];
        
        
        /*Method 2: Optimal Solution
        if(head == nullptr) return nullptr;
        auto it = head;
        auto front = head->next;
        Node* dum = new Node(0);
        while(it)
        {
            front = it->next;
            Node* n = new Node(it->val);
            it->next = n;
            n->next = front;
            it = front;
        }
        
        it = head;
        
        while(it)
        {
            if(it->random)
            {
                it->next->random = it->random->next;
                }
            it = it->next->next;
        }
        
        
        it = head;
        Node* ans = new Node(0);
        auto cpy = ans;
        front = head->next;
        while(it && it->next)
        {
            front = it->next->next;
            cpy->next = it->next;
            cpy = cpy->next;
            it->next = front;
            it = it->next;
        }
        
        return ans->next;*/
    }
};
