#include <bits/stdc++.h> 

vector<int> maxMinWindow(vector<int> a, int n) {

    /*vector<int> ans(n+1,0);
    vector<int> left(n+1,-1);
    vector<int> right(n+1,n);
            

    stack<int> st;

    for(int i=0;i<n;i++)
    {
        while(!st.empty() && a[st.top()] >= a[i]) st.pop(); 
        if(!st.empty()) left[i] = st.top();
        st.push(i);
    } 
    
    while(!st.empty()) st.pop();

    for(int i=n-1;i>=0;i--)
    {
        while(!st.empty() && a[st.top()] >= a[i]) st.pop(); 
        if(!st.empty()) right[i] = st.top();
        st.push(i);
    }

    for(int i=0;i<n;i++)
    {
        int len = right[i]-left[i]-1;

        ans[len] = max(ans[len],a[i]);
    }

    for(int i=n-1;i>=1;i--)
    {
        ans[i] = max(ans[i],ans[i+1]);
    }
    
    vector<int> res(n);

    for(int i=1;i<=n;i++)
    {
        res[i-1] = ans[i];
    }


    return res;*/

    vector<int> res(n,INT_MIN);
    
    stack<int> s;
    a.push_back(INT_MIN);
    
    for (int i = 0; i < a.size(); i++)
    {
        while(!s.empty() && a[s.top()]>=a[i]){
            int top = a[s.top()]; s.pop();
            int smal_left = s.empty()? -1 : s.top();
            int range = i - smal_left - 1;
            if(res[range-1]<top) res[range-1] = top;
        }
        s.push(i);
    }

    int max=INT_MIN;

    for(int i = res.size()-1;i>-1;i--){
        if(res[i]>max) max = res[i];
        res[i] = max;
    }
    
    return res;
}
