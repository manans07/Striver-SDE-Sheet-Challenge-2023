int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        /*Method 1: Brute Force
        
        int i=0,j=0;
        int arr[m+n];
        int k = 0;
        while(i<n && j<m)
        {
            if(arr1[i] > arr2[j])
            {
                arr[k++] = arr2[j++];
            }
            else{
                arr[k++] = arr1[i++];
            }
        }
        
        while(i<n) arr[k++] = arr1[i++];
        
        while(j<m) arr[k++] = arr2[j++];
        
        
        return arr[k1-1];*/
        
        
        
        /*Method 2: Binary Search*/
        
        if(n>m) return kthElement(arr2,arr1,m,n,k);
        
        int left = max(0,k-m);
        int right = min(k,n);
        
        while(left <= right)
        {
            int cut1 = (right+left)/2;
            int cut2 = k-cut1;
            
            int l1 = cut1 == 0?INT_MIN:arr1[cut1-1];
            int l2 = cut2 == 0?INT_MIN:arr2[cut2-1];
            int r1 = cut1 == n?INT_MAX:arr1[cut1];
            int r2 = cut2 == m?INT_MAX:arr2[cut2];
            
            if(l1 <= r2  && l2 <= r1)
            {
                return max(l1,l2);
            }
            
            else if(l1 > r2)
            {
                right = cut1-1;
            }
            
            else left = cut1+1;       
        }
        
        return 1;
    }
