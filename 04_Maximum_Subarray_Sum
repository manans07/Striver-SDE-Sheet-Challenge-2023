long long maxSubarraySum(int arr[], int n)
{
    /*
        Don't write main().
        Don't read input, it is passed as function argument.    
        No need to print anything.
        Taking input and printing output is handled automatically.
    */
    
    // Brute Force Solution { T.C = O(n^3) S.C = O(1)}
    int i,j,k;
    int Max = INT_MIN;
    for(i=0;i<n;i++)
    {
        for(j=i;j<n;j++)
        {
            int sum=0;
            for(k=i;k<j;k++)
            {
                sum+=arr[k];
                }
             Max = max(sum,Max);
        }
      }   
    
    // Better than Brute Force Solution { T.C = O(n^2) S.C = O(1)}
    int i,j;
    int Max = INT_MIN;
    for(i=0;i<n;i++)
    {
         int sum=0;
        for(j=i;j<n;j++)
        {
             sum+=arr[k];
             Max = max(sum,Max);
        }
      }   
    
    
    
    
    
    
    // Optimal solution using Kadane's Algorithm  { T.C = O(n) S.C = O(1)}
    if(n==0) return 0;
    long long sum = 0;

    long long ms = INT_MIN;

    for(long long i=0;i<n;i++)
    {
         
        sum+=arr[i];
        if(sum<0) sum=0;
        ms= ms>sum?ms:sum;
        
    }

    return ms;
}
