/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    /* Method 1: Get the maximum sum of heights different sub-trees.
    T.C = O(N^2) S.C = O(1)*/
    int getHeight(TreeNode* root)
    {
        if(root == nullptr) return 0;
        
        return max(1+getHeight(root->left),1+getHeight(root->right));
    }
    
    int getDia(TreeNode* root)
    {
        
        if(!root) return 0;
        
        int h = (getHeight(root->left) + getHeight(root->right));
        
        h = max(h,max(getDia(root->left),getDia(root->right)));
        
        return h;
        
    }
    
    /*
    int height(TreeNode* root, int d)
    {
        if(!root) return 0;
        
        int l = height(root->left,d);
        int r = height(root->right,d);
        
        d = max(d,(l+r));

        return 1+max(l,r);
    }*/
    
    
    
    int diameterOfBinaryTree(TreeNode* root) {
        return getDia(root);
        /*int d=0;
        height(root,d);
        return d;*/
    }
};
