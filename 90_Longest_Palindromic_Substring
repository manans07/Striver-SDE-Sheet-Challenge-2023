class Solution {
public:
    
    bool isPalindrome(int left,int right, string str)
    {
        while(left <= right)
        {
            if(str[left] != str[right]) return false;
            left++; right--;
        }
        
        return true;
    }
    
    
    
    string longestPalindrome(string s) {
        
        /*if(s.size() == 0 || s.size() == 1) return s;
        
        int n = s.size();
        
        vector<string> arr;
        
        
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                string str = "";
                
                for(int k=i;k<=j;k++)
                {
                    str+=s[k];
                }
                
                if(isPalindrome(0,str.size()-1,str)) arr.push_back(str);
            }
        }
        
        
        string s1 = *max_element(arr.begin(),arr.end());
        
        return s1;
        
        
        int len = 0;
        int n = s.size();
        int startInd = 0;
        
        
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
                if(isPalindrome(i,j,s))
                {
                    if(j-i+1 > len){len = j-i+1;
                    startInd = i;}
                }
            }
        }
        
        return s.substr(startInd,len);*/
        
        
        
        int n = s.size();
        int len = 0;
        string ans = "";
        vector<vector<int>> dp(n,vector<int>(n,0));
        
        for(int diff =0;diff<n;diff++)
        {
            for(int i=0, j = i+diff;j<n;j++,i++)
            {
                if(i==j) 
                {
                    dp[i][j] = 1;
                }
                else if(diff == 1)
                {
                    dp[i][j] = s[i]==s[j]?2:0;
                }
                else{
                    if(s[i] == s[j] && dp[i+1][j-1]) 
                    {
                        dp[i][j] = dp[i+1][j-1] + 2;
                    }
                }
                
                if(dp[i][j])
                {
                    if(j-i+1>len)
                    {
                        len = j-i+1;
                        ans = s.substr(i,len);
                    }
                }
                
            }
        }
        
        return ans;
    }
};
