    
class Solution {
public:

    /* Method 1: Brute Force T.C = O(2^N)+O(N*logN) S.C = O(2^NlogN) + O(N)*/
    
    set<vector<int>> st;
    
    void getSubsets(vector<int> &arr,int i,vector<int> &sum)
    {
        if(i==arr.size()) {
            st.insert(sum);
            return;}
        
        getSubsets(arr,i+1,sum);
        sum.push_back(arr[i]);
        getSubsets(arr,i+1,sum);
        sum.pop_back();
    }

    vector<vector<int>> subsetsWithDup(vector<int>& v) {
        vector<int> sum;
        sort(v.begin(),v.end());
        getSubsets(v,0,sum);
        vector<vector<int>> v1(st.begin(),st.end());
        return v1;}
    
    
    /*
    vector<vector<int>> s1;
    void fun(vector<int>& v,int i,vector<int> ds,bool prev){
        if(i == v.size()){
                s1.push_back(ds);
                } 
        else{fun(v,i+1,ds,false);
        if(i>0 && v[i] == v[i-1] && !(prev)) return;
        ds.push_back(v[i]);
        fun(v,i+1,ds,true);
        ds.pop_back();}
    }
    
    
    
    vector<vector<int>> subsetsWithDup(vector<int>& v) {
        sort(v.begin(),v.end());
        vector<int> ds;
        fun(v,0,ds,false);
        
        return s1;
        }*/
    
};
