/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        
        /*Method 1: Brute Force T.C = O(N*k) S.C = O(1) 
        if(head == nullptr || head->next == nullptr) return head;
        
        int i=0;
        ListNode* h1 = new ListNode(0);
        h1->next = head;
        
        while(i<k && (h1->next))
        {
            ListNode* p1 = h1->next;
            ListNode* p2 = h1->next->next;
            while(p2->next){
                p1 = p1->next;
                p2 = p2->next;
            }
            p1->next = p2->next;
            p2->next = h1->next;
            h1->next = p2;
            i++;
        }
        
        return h1->next;*/
        
        /*Method 2: Optimal Solution T.C = O(N-(N%k)) S.C = O(1)*/
        
        if(head == nullptr || head->next == nullptr || k==0) return head;
        ListNode* temp = head;
        int cnt =1;    
        while(temp->next)
        {
            ++cnt;
            temp = temp->next;}
        
        temp->next = head;
        // head = temp;
        k=k%cnt;
        int n = cnt-k;
        while(n--) temp = temp->next;
        
        head = temp->next;
        temp->next = nullptr;
        
        return head;
    }
};
