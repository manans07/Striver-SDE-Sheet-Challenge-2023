#include <bits/stdc++.h> 
vector<int> mergeKSortedArrays(vector<vector<int>>&arr, int k)
{
    // Write your code here.
     // Write your code here. 

/*    for(int i=1;i<k;i++){

        arr[0].insert(arr[0].end(), arr[i].begin(), arr[i].end());

    }

    sort(arr[0].begin(),arr[0].end());

    return arr[0];*/
    
    /*
    vector<int> ans;
    priority_queue<int,vector<int>,greater<int>> pq;

    for(auto it:arr)
    {
        for(auto it1:it)
        {
            pq.push(it1);
        }
    }

    
    while(!pq.empty())
    {
        ans.push_back(pq.top());
        pq.pop();
    }

    return ans;*/

    vector<pair<int,pair<int,int>>> p1;
    priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;

    int n = arr.size();
    for(int i=0;i<k;i++)
    {
        pair<int,pair<int,int>> temp = {arr[i][0],{i,0}};
        pq.push(temp);
    }

    vector<int> ans;
    while(!pq.empty())
    {
        pair<int,pair<int,int>> temp = pq.top();
        pq.pop();
        int value = temp.first;
        ans.push_back(value);
        int row = temp.second.first;
        int col = temp.second.second;

        if(col+1<arr[row].size())
        {
            pq.push({arr[row][col+1],{row,col+1}});
        }

    }

    return ans;
}
