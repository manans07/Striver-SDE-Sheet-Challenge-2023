#include <bits/stdc++.h> 
using namespace std;

int merge(vector<int> &arr,int left,int mid,int right)
{	
	int cnt = 0;
	int n = arr.size();
	int j = mid+1;
	for(int i=left;i<=mid;i++)
	{
		while((j<=right) && (arr[i] > 2*arr[j]))
		{
			j++;
		}
	cnt+=j-(mid+1);
	}

	int ind1 = left;
	int ind2 = mid+1;
	// int k = 0;
	vector<int> v;

	while(ind1<=mid && ind2<=right)
	{
		if(arr[ind1] > arr[ind2])
		{
			v.push_back(arr[ind2++]);
		}
		else{
			v.push_back(arr[ind1++]);
		}

	}


	while(ind1<=mid)
	{
		v.push_back(arr[ind1++]);
	
	}

	while(ind2<=right)
	{
		v.push_back(arr[ind2++]);
	
	}

	for(int i=left;i<=right;i++)
	{
		arr[i] = v[i-left];
	}

	return cnt;
}




int mergeSort(vector<int> &arr,int left,int right)
{
	if(left>=right) return 0;
	// int cnt = 0;
	int mid = (right+left)/2;
	int cnt =mergeSort(arr,left,mid);
	cnt+=mergeSort(arr,mid+1,right);
	cnt+=merge(arr,left,mid,right);
	return cnt;

}

int reversePairs(vector<int> &arr, int n){
	// Write your code here.	

	/*Method 1: Brute Force T.C = O(N^2) S.C = O(1)
	int cnt = 0;
	for(int i=0;i<n;i++)
	{
		for(int j=n-1;j>i;j--)
		{
			if(arr[i] > (2*arr[j])) cnt++; 
		}
	}
	return cnt;*/


	/*Method 2: Using MergeSort T.C = O(N*logN) S.C = O(N)*/
	return mergeSort(arr,0,n-1);

}
