#include <bits/stdc++.h>
using namespace std;

int LongestSubsetWithZeroSum(vector < int > arr) {  
        // Write your code here
        /*Method 1: Brute Force T.C = O(n^3) S.C = O(1)
        int ans = 0;
        int n = arr.size();
        for(int i=0;i<n;i++)
        {
          for(int j=i+1;j<n;j++)
          {
            int sum=0;
            int cnt =0;
            for(int k=i;k<=j;k++)
            {
                sum+=arr[k];
                // cnt++;
            }
            if(sum == 0)
            {
              ans = max(ans,j-i+1);
            }
          }
        }*/
      
        /*Method 2: Brute Force with O(n^2)
        int ans = 0;
        int n = arr.size();
        for(int i=0;i<n;i++)
        {
          int sum = 0;
          for(int j=i;j<n;j++)
          {
            sum+=arr[j];
            if(sum == 0)
            {
              ans = max(ans,j-i+1);
            }
          }
          
        }*/
      
        /*Method 3: Hashing T.C = near to O(N^2) S.C = O(N)
      
        unordered_map<int,int> mp;
        int n = arr.size();
        int cnt = 0;
        int sum = 0;
        for(int i=0;i<n;i++)  
        {
            sum+=arr[i];
            if(sum==0) 
            {
              cnt = max(cnt,i+1);
            }
      
            int rem = sum;
      
            if(mp.find(rem) != mp.end())
            {
              int len = i-mp[rem];
              cnt = max(cnt,len);
            }
      
            // Condition to check negative numbers
            if(mp.find(sum) == mp.end()){mp[sum] = i;}
      
        }*/
      
      
        /*Method 4: Two Pointers + Greedy  (Most Optimal)   T.C = O(2*N) S.C = O(1)*/
          int n = arr.size();
          int left=0;
          int right = 0;
          int sum = arr[0];
          int cnt = 0;
      
          while(right<n)
          {
              while(sum>0 && left<=right)
              {
                  sum-=arr[left];
                  left++;
              }
              
              if(sum == 0)
              {
                  cnt = max(cnt,right-left+1);
              }
       
              right++;
              if(right<n){sum+=arr[right];}
              
          }
      
        return cnt;
}
