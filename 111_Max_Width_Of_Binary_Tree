/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    /*Time: O(N^2) Space: O(N)*/
    int widthOfBinaryTree(TreeNode* root) {

        if(root == NULL) return 0;
        
        queue<pair<TreeNode*,long long>> q1;
        q1.push({root,0});
        long long ans = 0;
        
        while(!q1.empty())
        {
            
            
            int n = q1.size();
            long long mini = q1.front().second;
            long long r,l;
            
            for(int i=0;i<n;i++)
            {
                long long c = q1.front().second - mini;
                TreeNode* temp = q1.front().first;
                q1.pop();
                
                if(i==0) l = c;
                if(i==n-1) r = c;
                if(temp->left) q1.push({temp->left,c*2 +1});
                if(temp->right) q1.push({temp->right,c*2+2});
            }
            
            ans = max(ans,r-l+1);    
        }
        
        return ans;        
    }
};
