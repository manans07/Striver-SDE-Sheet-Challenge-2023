#include <bits/stdc++.h>

vector<int> majorityElementII(vector<int> &arr)
{
    // Write your code here.
    /*Method 1: Brute Force  T.C = O(N^2) S.C = O(N) 
    int n = arr.size();
    vector<int> ans;
    for(int i=0;i<n;i++)
    {
        int cnt =0;
        for(int j=0;j<n;j++)
        {
            if(arr[i] == arr[j]) cnt++;
        }

        if(cnt > floor(n/3)){ 
            if(find(ans.begin(),ans.end(),arr[i]) == ans.end())
            {
                ans.push_back(arr[i]);
            }
        }
    }

    return ans;*/

    /*Method 2: Hashing T.C = O(N) S.C = O(N+N)

    int n = arr.size();
    vector<int> ans;
    unordered_map<int,int> mp;
    for(int i=0;i<n;i++)
    {
        mp[arr[i]]++;
    }

    for(auto it:mp)
    {
        if(it.second>(n/3)) ans.push_back(it.first);
    }

    return ans;*/


    /*Method 3: Extended Moore's Voting Algorithm:  T.C = O(N+N) S.C = O(N) */

    int n = arr.size();
    vector<int> ans;
    int cnt1 = 0,cnt2 = 0;
    int num1 = -1, num2 = -1;

    for(int i=0;i<n;i++)
    {
        if(num1 == arr[i]) cnt1++;
        else if(num2 == arr[i]) cnt2++;
        else if(cnt1 == 0) {
            num1 = arr[i];
            cnt1 = 1;
        }
        else if(cnt2 == 0) {
            num2 = arr[i];
            cnt2 = 1;
        }
        else{
            cnt1--;
            cnt2--;
        }
    }

    cnt1=0;
    cnt2 = 0;

    for(int i=0;i<n;i++)
    {
        if(num1 == arr[i]) cnt1++;
        else if(num2==arr[i]) cnt2++;
    }

    if(cnt1>(n/3)) ans.push_back(num1);
    if(cnt2>(n/3)) ans.push_back(num2);

    return ans;
}
