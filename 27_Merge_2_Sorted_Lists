/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {

//         if(l1 == NULL) return l2;
//         if(l2 == NULL) return l1;

//         if(l1->val > l2->val)
//         {   std::swap(l1,l2);}

//         ListNode* res = l1;
//         while((l1 != NULL) && (l2 != NULL)){
//             ListNode* tmp = NULL;
//             while((l1 != NULL) && (l1->val <= l2->val))
//             {
//                     tmp = l1;
//                     l1 = l1->next;
//             }
//             tmp->next = l2;

//             std::swap(l1,l2);
//         }

//         return res;
        
        /*
        if(l1==nullptr) return l2;
        else if(l2==nullptr) return l1;
        else if(l1==nullptr && l2==nullptr) return l2;
        
        
        
        
        ListNode* temp = l1;
        
        int n=1;
        while(temp->next)
        {
            n++;
            temp = temp->next;    
        }
        
        temp->next = l2;
        while(temp->next)
        {
            n++;
            temp = temp->next;    
        }
        
        
        
        temp = l1;
        int i =0;
        while(i<n-1 && temp->next)
        {
            int j = 0;
            temp=l1;
            ListNode* t = l1;
            while(j<n-i-1 && t->next)
            {
                if(t->val > temp->val)
                {
                    swap(t->val,temp->val);
                }
                t=t->next;
                j++;
            }
            temp = temp->next;
            i++;
            
        }
        
        
        return l1;
        */
        
        
        /*Method 2: In Place Merging*/
        
        if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
        if(l1->val > l2->val)
        {
            std::swap(l1,l2);
        }
        
        
        ListNode* res = l1;
        while(l1 && l2)
        {
            ListNode* tmp = nullptr;
            while((l1!=NULL) && (l1->val <= l2->val)){
                tmp = l1;
                l1 = l1->next;
            }
            tmp->next = l2;
            swap(l1,l2);
        }

        return res;
    }
};
