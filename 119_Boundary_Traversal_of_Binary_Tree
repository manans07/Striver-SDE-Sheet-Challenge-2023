#include <bits/stdc++.h>

/************************************************************

    Following is the Binary Tree node structure:

    template <typename T>
    class TreeNode
    {
    public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data)
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode()
        {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/

/*Time: O(N) Space: O(N)*/


void getLeftNodes(TreeNode<int> *root,vector<int> &ans)
{
    TreeNode<int> *cur = root->left;

    while(cur)
    {
        if(!(!(cur->left) && !(cur->right))) ans.push_back(cur->data);
        if(cur->left) cur = cur->left;
        else cur = cur->right;
    }

}

void getRightNodes(TreeNode<int> *root,vector<int> &ans)
{
    TreeNode<int> *cur = root->right;
    vector<int> temp;
    while(cur)
    {
        if(!(!(cur->left) && !(cur->right))) temp.push_back(cur->data);
        if(cur->right) cur = cur->right;
        else cur = cur->left;
    }

    for(int i=temp.size()-1;i>=0;i--)
    {
        ans.push_back(temp[i]);
    }

}

void getLeafNodes(TreeNode<int> *root, vector<int> &ans) {
    if (!root->left && !root->right){
        ans.push_back(root->data);
        return;
    }
    if(root->left) getLeafNodes(root->left,ans);
    if(root->right) getLeafNodes(root->right,ans);
}

vector<int> traverseBoundary(TreeNode<int> *root)
{
	// Write your code here.
    vector<int> ans;
    if(!root) return ans;
    if(!(!root->left && !root->right)) ans.push_back(root->data);

    getLeftNodes(root, ans);
    getLeafNodes(root, ans);
    getRightNodes(root, ans);

    return ans;
}
