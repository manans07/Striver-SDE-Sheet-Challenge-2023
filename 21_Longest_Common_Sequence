class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        
        /*if(nums.size()==0) return 0;
        else if(nums.size()==1) return 1;
        int Max = *max_element(nums.begin(),nums.end());
        
        vector<int> temp(Max+1,0);
        int n = nums.size();
        int i;
        for(i=0;i<n;i++)
        {
            temp[nums[i]] = 1;
        }
        
        i=0;
        int m = temp.size();
        for(i=0;i<m;i++)
        {
            if(temp[i] == 1) break;
        }
        
        int cnt = 1;
        int ans = INT_MIN;
        for(int j=i+1;j<m;j++)
        {
            if(temp[j] == 0)
            {
                cnt = 0;
                continue;
            }
            if(temp[j-1] == temp[j]){ 
                ++cnt;
                ans = max(ans,cnt);
            }
        }
        
        if(cnt>ans) return cnt;
        return ans;*/
        
        
        
        //Method 1: Hashing T.C= O(N) S.C = O(N+N)
        int cnt =1;
        int ans=INT_MIN;
        int n = nums.size();
        if(n==0) return 0;
        set<int> st;
        
        for(auto it:nums)
        {
            st.insert(it);
        }
        
        if(st.size() == 1) return 1;
        vector<int> temp;
        
        for(auto it:st)
        {
            temp.push_back(it);
        }
        
        int n1 = temp.size();
        for(int i=0;i<n1-1;i++)
        {
            if(temp[i+1] == temp[i]+1) {
                cnt++;
                ans = max(cnt,ans); }
            else
            {
                cnt =1;
                ans = max(ans,cnt);
            }
        }
    
        return ans;
    }
};
