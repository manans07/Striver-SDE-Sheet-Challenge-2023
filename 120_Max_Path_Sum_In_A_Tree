/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

int ans = 0;

class Solution {
public:

    /* Time: O(N)  Space: O(N) */
    int maxPathSum(TreeNode* root) {
       
        if(!root) return 0; // If root is null
        
        int maxSum = INT_MIN; // initialize maxSum with the minimum possible value
        
        pathSum(root,maxSum); // Function to find max path sum
        return maxSum;
    }
    
    int pathSum(TreeNode* root,int &maxSum)
    {
        if(!root) return 0; // if node is null
        // Ignore the negative numbers by checking if node's value is > 0 or not
        int leftSum = max(0, pathSum(root->left,maxSum));    // Getting the left path sum of the current node 
        int rightSum = max(0, pathSum(root->right,maxSum));  // Getting the right path sum of the current node
        
        maxSum = max(maxSum,leftSum+rightSum+root->val); // Get the max path sum of the current node by the adding the value of the left and right path sums
        return root->val + max(leftSum,rightSum); 
    }
    
    
};
