#include <bits/stdc++.h> 
using namespace std;


/*Method 1: Brute Force using Recursion: T.C= Exponential  S.C = Exponential 
int solve(int i,int j,int m,int n)
{
	if(i>m || j>n) return 0;
	if(i==m-1 && j==n-1) return 1;

	return solve(i+1,j,m,n) + solve(i,j+1,m,n);

}*/

/*Method 2: Recursion + Memoization T.C = O(m*n) S.C = O(m*n) 
int solve(int i,int j,int m,int n,vector<vector<int>> &dp)
{
	if(i>m || j>n) return 0;
	if(i==m-1 && j==n-1) return 1;
	if(dp[i][j] != -1) return dp[i][j];

	return dp[i][j] = solve(i+1,j,m,n,dp) + solve(i,j+1,m,n,dp);

}*/

/*Method 3:Combinatorics Solution T.C = O(n-1) S.C = O(1)*/

int solve(int m,int n)
{
	int N = m+n-2;
	int r = m-1;
	double res = 1;

	for(int i=1;i<=r;i++)
	{
		res = res*(N-r+i)/i;
	}
	return (int) res;
}


int uniquePaths(int m, int n) {
	// Write your code here.
	// int ans = solve(0,0,m,n);
	// vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
	
	// int ans = solve(0,0,m,n,dp);
	int ans = solve(m,n);
	return ans;
}
