class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        
        /*if(nums.size()==0) return 0;
        else if(nums.size()==1) return 1;
        int Max = *max_element(nums.begin(),nums.end());
        
        vector<int> temp(Max+1,0);
        int n = nums.size();
        int i;
        for(i=0;i<n;i++)
        {
            temp[nums[i]] = 1;
        }
        
        i=0;
        int m = temp.size();
        for(i=0;i<m;i++)
        {
            if(temp[i] == 1) break;
        }
        
        int cnt = 1;
        int ans = INT_MIN;
        for(int j=i+1;j<m;j++)
        {
            if(temp[j] == 0)
            {
                cnt = 0;
                continue;
            }
            if(temp[j-1] == temp[j]){ 
                ++cnt;
                ans = max(ans,cnt);
            }
        }
        
        if(cnt>ans) return cnt;
        return ans;*/
        
        
        
        //Method 1: Hashing T.C= O(N) S.C = O(N+N)
        int cnt =1;
        int ans=INT_MIN;
        int n = nums.size();
        if(n==0) return 0;
        set<int> st;
        
        for(auto it:nums)
        {
            st.insert(it);
        }
        
        if(st.size() == 1) return 1;
        vector<int> temp;
        
        for(auto it:st)
        {
            temp.push_back(it);
        }
        
        int n1 = temp.size();
        for(int i=0;i<n1-1;i++)
        {
            if(temp[i+1] == temp[i]+1) {
                cnt++;
                ans = max(cnt,ans); }
            else
            {
                cnt =1;
                ans = max(ans,cnt);
            }
        }
    
        return ans;
    }
};

// Code Studio Solution

#include <bits/stdc++.h>



int linearSearch(vector<int> arr,int element)
{
    int n = arr.size();
    
    for(int i=0;i<n;i++)
    {
        if(arr[i] == element) return i;
    }

    return -1;
}

int lengthOfLongestConsecutiveSequence(vector<int> &arr, int n) {
    // Write your code here.

    /*if(n==0) return 0;
    set<int> st;

    for(auto it:arr)
    {
        st.insert(it);
    }

    if(st.size()==1) return 1;

    int cnt =1;
    int ans = INT_MIN;
    vector<int> temp;
    for(auto it:st)
    {
        temp.push_back(it);
    }

    int m = temp.size();
    for(int i=0;i<m-1;i++)
    {
        if(temp[i+1]==temp[i]+1)
        {
            cnt++;
            ans=max(ans,cnt);
        }
        else{
            cnt=1;
            ans=max(ans,cnt);
        }
    }

    return ans;*/
// -----------------------------------------------------


    /*Method 1: Brute Force T.C = near to O(N^2) S.C = O(1) 

    int ans = 1;

    for(int i=0;i<n;i++)
    {
        int x = arr[i];
        int cnt =1;
        while(linearSearch(arr,x+1) != -1)
        {
            x+=1;
            cnt++;
        }
        ans= max(cnt,ans);
    }*/


    /*Method 2: Better Solution T.C = near to O(N*logN) S.C = O(1) 

    int ans = 1;

    sort(arr.begin(),arr.end());
    
    int lastSmaller = INT_MIN,cnt =1;

    for(int i=0;i<n;i++)
    {
        if(arr[i]-1 == lastSmaller)
        {
            cnt+=1;
            lastSmaller = arr[i];
        }

        else if(arr[i] != lastSmaller)
        {
            cnt = 1;
            lastSmaller = arr[i];
        }

        ans = max(ans,cnt);
    }
    
    
    return ans;*/


    /*Optimal Solution:  T.C = close to O(N) S.C = O(1)*/

    if(n==0) return 0;
    if(n==1) return 1;

    unordered_set<int> st;

    for (auto it : arr) {
      st.insert(it);
    }


    int ans = 1;

    for(int i=0;i<n;i++)
    {
        if(st.find(arr[i]-1) == st.end())
        {
            int cnt =1;
            int x = arr[i];

            while(st.find(x+1) != st.end())
            {
                cnt++;
                x++;
            }

            ans = max(cnt,ans);
        }

    }

    return ans;
    
}



