class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& arr, int target) {
        
        vector<vector<int>> ans;
        
        /*Method 1: Brute Force T.C = O(N^4) S.C = O(1)
        set<vector<int>> st;
        int i,j,k,l;
        int n = arr.size();
        for(i=0;i<n;i++)
        {
            for(j=i+1;j<n;j++)
            {
                for(k=j+1;k<n;k++)
                {
                    for(l=k+1;l<n;l++)
                    {
                        long long sum = arr[i]+arr[j];
                        sum+=arr[k];
                        sum+=arr[l];
                        if(sum == target) 
                        {
                            vector<int> temp = {arr[i],arr[j],arr[k],arr[l]};
                            sort(temp.begin(),temp.end());
                            st.insert(temp);
                        }
                    }
                }
            }
        }
        
        for(auto it:st)
        {
            ans.push_back(it);
        }*/
        
        /*Method 2: Better Solution T.C = O(N^3 * logN) S.C = O(N^2)
        
        int i,j,k;
        12int n = arr.size();
        set<vector<int>> st;
        for(i=0;i<n;i++)
        {
            for(j=i+1;j<n;j++)
            {
                set<long long> s;
                for(k=j+1;k<n;k++)
                {
                    long long sum = arr[i]+arr[j];
                    sum+=arr[k];
                    long long val = target-sum;
                    
                    if(s.find(val) != s.end())
                    {
                        vector<int> temp = {arr[i],arr[j],arr[k],(int)val};
                        sort(temp.begin(),temp.end());
                        st.insert(temp);
                    }
                    s.insert(arr[k]);
                    
                }
            }
        }
        
        for(auto it:st)
        {
            ans.push_back(it);
        }*/
        
        
        
        
        /*Method 3: Extended Two Pointers T.C = O(N^3) S.C = O(N)*/
        int n = arr.size();
        sort(arr.begin(),arr.end());
        for(int i=0;i<n;i++)
        {
            if(i>0 && arr[i] == arr[i-1]) continue;
            for(int j=i+1;j<n;j++)
            {
                if(j>i+1 && arr[j] == arr[j-1]) continue;
                int k = j+1;
                int l = n-1;
                
                while(k<l)
                {
                    long long sum = arr[i];
                    sum+=arr[j];
                    sum+=arr[k];
                    sum+=arr[l];
                    
                    if(sum == target)
                    {
                        vector<int> temp = {arr[i],arr[j],arr[k],arr[l]};
                        ans.push_back(temp);
                        k++;l--;
                        
                    while(k<l && arr[k] == arr[k-1]) k++;
                    while(k<l && arr[l] == arr[l+1]) l--;        
                    }
                    
                    else if(sum<target)
                    {
                        k++;
                    }
                    else
                    {
                        l--;
                        }
                }
            }
        }
        
        return ans;
    }
};
