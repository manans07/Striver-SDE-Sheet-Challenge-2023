bool binarySearch(vector<int> v, int left,int right, int target)
{
    int mid;

    while(left<=right)
    {
        mid = left + (right-left)/2;

        if(v[mid] == target) return true;

        if(v[mid] > target) right = mid-1;

        if(v[mid] < target) left = mid+1;

    }

    return ((v[left] == target) || (v[right] == target));

}


bool searchInMatrix(vector<vector<int>> v,int target)
{
    int left = 0;
    if(!v.size()) return false;
    int right = (v.size() * v[0].size()) - 1;
    
    int mid;
    int m = v[0].size();
    while(left<=right)
    {
        mid = left + (right-left)/2;

        if(v[mid/m][mid%m] == target) return true;

        if(v[mid/m][mid%m] > target) right = mid-1;

        if(v[mid/m][mid%m] < target) left = mid+1;

    }

    // return ((v[left%m][left%m] == target) || (v[right%m][right%m] == target));
    return false;
}







bool searchMatrix(vector<vector<int>>& mat, int target) {

  /*Method 1: Brute Force  {T.C = O(N^2) S.C = O(1) }
  int m = mat.size();
  int n = mat[0].size();

  for (int i = 0; i < m; i++) {
    for (int j = 0; j < n; j++) {
      if (mat[i][j] == target)
        return true;
    }
    }
        
    return false;*/

    
    /*Method 2: Binary Search for each row. T.C = O(N*logN) S.C = O(N)

    for(auto it: mat)
    {
        int n = it.size();
        if(binarySearch(it,0,n-1,target)) return true;
    }

    return false;*/

    /*Method 3: Optimal Solution */

    int n = mat.size();
    return searchInMatrix(mat,target);

}
