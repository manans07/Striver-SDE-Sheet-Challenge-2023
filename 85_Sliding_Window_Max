class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
    
        vector<int> ans;
        int n = nums.size();
        /*Method 1: Brute Force T.C = O(N*N) S.C = O(1)
        int n1 = n-k;
        for(int i=0;i<=n1;i++)
        {
            int num = *max_element(nums.begin()+i,nums.begin()+i+k);
            ans.push_back(num);
            }*/

        /*Method 2: Using Deque T.C = O(N) S.C = O(N)*/
        deque<int> q1;

        for(int i=0;i<n;i++)
        {
            if(!q1.empty() && q1.front() == i-k) q1.pop_front();
            
            while(!q1.empty() && nums[i] >= nums[q1.back()]) q1.pop_back();
            
            q1.push_back(i);
            
            if(i>=k-1) ans.push_back(nums[q1.front()]);
        }
        
        
        return ans;
        
    }
};
