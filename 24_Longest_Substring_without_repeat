  
    bool isUnique(string s)
    {
        unordered_map<char,int> mp;
        
        for(auto it:s)
        {
            mp[it]++;
            }
        
        for(auto it:mp)
        {
            if(it.second>1) return false;
        }
        return true;
    }
    
    
    int lengthOfLongestSubstring(string s) {
       
        if(s.size() == 0) return 0;
        
        /*Method 1: Brute Force T.C = O(N^2) S.C = O(N^2)
        vector<string> v;
        int n = s.size();
        
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                string str = "";
                for(int k=i;k<=j;k++)
                {
                    str += s[k];
                    }
                v.push_back(str);
            }
        }
        
        int ans = 1;
        for(auto it:v)
        {
            if(isUnique(it))
            {
                ans = ans>it.size()?ans:it.size();
            }
                }
        
        */
        
        
        /*Brute but better than Naive  T.C = O(N^2) S.C = O(N)
        
        int n = s.size();
        int cnt = 0;
        
        for(int i=0;i<n;i++)
        {
            unordered_set<int> st;
            for(int j=i;j<n;j++)
            {
                if(st.find(s[j])!= st.end())
                {
                    cnt = max(cnt,j-i);
                    break;
                }

            st.insert(s[j]);
            }
        }*/
        
        
        
        
        
        /*Method 2: Better Solution T.C = near to O(2*N) S.C = O(N)
        int left = 0,right =0;
        int n = s.size();
        unordered_set<char> st;
        int cnt = 0;
        while(right < n)
        {
            if((st.find(s[right]) != st.end()))
            {
                while(left<right && st.find(s[right]) != st.end())
                {
                st.erase(s[left]);
                left++;
                    }
            }
            
            st.insert(s[right]);
            cnt = max(cnt, right-left+1);
            right++;
            }
        */
        
            /*      // if(str.size()==0) return 0;
                  int cnt = INT_MIN;
                  unordered_set < int > set;
                  int l = 0;
                  for (int r = 0; r < s.length(); r++) // outer loop for traversing the string
                  {
                    if (set.find(s[r]) != set.end()) //if duplicate element is found
                    {
                      while (l < r && set.find(s[r]) != set.end()) {
                        set.erase(s[l]);
                        l++;
                      }
                    }
                    set.insert(s[r]);
                    cnt = max(cnt, r - l + 1);
                  }
                  // return maxans;*/ 
        
        
        
        
        
        /*Method 3: Optimal Solution T.C = near to O(N) S.C = O(N)*/
        int left = 0, right = 0;
        int cnt  = 0;
        int n = s.size();
        vector<int> mp(256,-1);
        while(right<n)
        {
            if(mp[s[right]] != -1)
            {
                left = max(mp[s[right]]+1,left);
                }
            mp[s[right]] = right;
            cnt = max(cnt,right-left+1);
            right++;
            }
        
        return cnt;
    }
